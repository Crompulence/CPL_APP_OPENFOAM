name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  test:
    runs-on: ubuntu-20.04
            
    steps:
    
      - name: Checkout CPL APP
        uses: actions/checkout@v3
    
      - name: Update repo
        run: sudo apt-get update -y
        
      - name: Install mpich
        run: sudo apt-get install -y mpich
        
      - name: OpenFOAM prerequists
        run: |
            sudo apt-get install build-essential autoconf 
            sudo apt-get install autotools-dev cmake gawk gnuplot
            sudo apt-get install flex libfl-dev libreadline-dev zlib1g-dev
            sudo apt-get install libgmp-dev libmpfr-dev libmpc-dev
             
      - name: Download prebuilt OpenFOAM artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          name: built_OpenFOAM-v2106_mpich_Ubuntu_20.04
          run_id: 4285829398
      
      #- name: Download OpenFOAM 2106 built for 20.04 from pCloud
      #  run: |
      #      wget https://edef1.pcloud.com/cBZhnSn54ZFm7RbuZVJl0ZXZMHGTc7Z2ZZq4pZkZa4xYMZgZW7Z90ZjXZJ7ZnkZqkZ37Z17ZfZEZlkZK7Z1XZb0pYZXHI1JcsAY4u33JtjqATDLyb9TxXX/built_OpenFOAM-v2106_mpich_Ubuntu_20.04.tar.gz
      #      mv built_OpenFOAM-v2106_mpich_Ubuntu_20.04.tar.gz built_OpenFOAM-v2106.tar.gz
            
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "built_OpenFOAM-v2106.tar.gz"

      - name: File exists
        if: steps.check_files.outputs.files_exists == 'true'
        # Only runs if all of the files exists
        run: echo built_OpenFOAM-v2106.tar.gz exists!

      - name: untar OpenFOAM
        if: steps.check_files.outputs.files_exists == 'true'
        run:  tar -xzvf built_OpenFOAM-v2106.tar.gz ./OpenFOAM-v2106

       #########################################   
       #   Download and build if no artifact  #
       #########################################
      - name: Or Download OpenFOAM if it doesn't exist
        if: steps.check_files.outputs.files_exists != 'true'
        run: | 
          wget https://develop.openfoam.com/Development/openfoam/-/archive/OpenFOAM-v2106/openfoam-OpenFOAM-v2106.tar.gz
          wget https://develop.openfoam.com/Development/ThirdParty-common/-/archive/v2106/ThirdParty-common-v2106.tar.gz
          tar -xzf openfoam-OpenFOAM-v2106.tar.gz
          mv openfoam-OpenFOAM-v2106 OpenFOAM-v2106
          tar -xzf ThirdParty-common-v2106.tar.gz
          #wget https://develop.openfoam.com/Development/openfoam/-/archive/OpenFOAM-v2112.220610/openfoam-OpenFOAM-v2112.220610.tar.gz
          #wget https://develop.openfoam.com/Development/ThirdParty-common/-/archive/v2112/ThirdParty-common-v2112.tar.gz
          #tar -xzf openfoam-OpenFOAM-v2112.220610.tar.gz
          #tar -xzf ThirdParty-common-v2112.tar.gz

      - name: Check OpenFOAM can be built
        if: steps.check_files.outputs.files_exists != 'true'
        working-directory: ./OpenFOAM-v2106
        run: | 
          cp ../config/prefs.sh ./etc/
          source ./etc/bashrc || true
          foamSystemCheck        

      - name: Build OpenFOAM with mpich
        if: steps.check_files.outputs.files_exists != 'true'
        working-directory: ./OpenFOAM-v2106
        run: | 
          cp ../config/prefs.sh ./etc/
          source ./etc/bashrc || true
          ./Allwmake -j
          
       #########################################   
       # Save the completed upload of OpenFOAM #
       #########################################
      - name: Tar built OpenFOAM ready for upload
        if: steps.check_files.outputs.files_exists != 'true'
        run: | 
            tar -czvf built_OpenFOAM-v2106.tar.gz ./OpenFOAM-v2106
            
      - name: Upload built OpenFOAM artifact
        if: steps.check_files.outputs.files_exists != 'true'
        uses: actions/upload-artifact@v3
        with:
          name: built_OpenFOAM-v2106_mpich_Ubuntu_20.04
          path: built_OpenFOAM-v2106.tar.gz     
          
       #########################################   
       #  Run both a serial and parallel case  #
       #########################################
      #- name: Check OpenFOAM works ok
      #  working-directory: ./OpenFOAM-v2106
      #  run: | 
      #    cd ./path/to/cavity/example
      #    mpiexec -n 2 icoFoam -parallel

      # Checks-out cpl-library repository
      - uses: actions/checkout@v3
        with:
          repository: Crompulence/cpl-library
          path: cpl-library
          
      - name: Build cpl-library
        working-directory: ./cpl-library
        run: | 
          make PLATFORM=gcc
          source SOURCEME.sh
          #Contents of SOURCEME
          echo "CPL_PATH=$CPL_PATH" >> $GITHUB_ENV
          echo "CPL_BIN_PATH=$CPL_BIN_PATH" >> $GITHUB_ENV
          echo "CPL_LIBRARY_PATH=$CPL_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPL_INCLUDE_PATH=$CPL_INCLUDE_PATH" >> $GITHUB_ENV
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
          echo "CPLPY_PATH=$CPLPY_PATH" >> $GITHUB_ENV
          echo "CPL_THIRD_PARTY=$CPL_THIRD_PARTY" >> $GITHUB_ENV
          echo "CPL_THIRD_PARTY_INC=$CPL_THIRD_PARTY_INC" >> $GITHUB_ENV
          echo "CPL_THIRD_PARTY_LIB=$CPL_THIRD_PARTY_LIB" >> $GITHUB_ENV
          echo "$CPL_BIN_PATH" >> $GITHUB_PATH
                             
      - name: Build CPLTestFoam 
        run: | 
           echo ./OpenFOAM-v2106 > ./CODE_INST_DIR
           cd ./src
           ln -s ./CPLPstream_v2106 ./CPLPstream
           cd ./../
           source SOURCEME.sh || true
           make pstream
           make cpltestfoam
           
      - name: Run CPLTestFoam 
        run: | 
           source SOURCEME.sh || true
           cd ./examples/CPLTestFoam
           cplc++ minimal_MD.cpp -o MD
           blockMesh
           mpiexec -n 1 CPLTestFoam -parallel : -n 1 ./MD
           
      - name: Build CPLTestSocketFoam 
        run: |      
           source SOURCEME.sh || true
           make socket
           make cpltestsocketfoam
           
      - name: Run CPLTestSocketFoam 
        run: |      
           source SOURCEME.sh || true
           cd ./examples/CPLTestSocketFoam
           cplc++ minimal_MD.cpp -o MD
           blockMesh
           decomposePar -force
           mpiexec -n 2 CPLTestSocketFoam -parallel : -n 2 ./MD

       #########################################   
       #  Run all further tests using Pytest   #
       #########################################
      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install mpi4py
        run: pip install mpi4py
            
      - name: Install pytest
        run: pip install pytest

      - name: Install scientific packages
        run: pip install numpy scipy matplotlib

      - name: Test CPLIcoFoam Couette
        run: |      
           source SOURCEME.sh || true
           pytest -s test/couette_coupled/test_couette.py 

      #- uses: actions/checkout@v2
      #- name: Setup tmate session
      #  if: ${{ failure() }}
      #  uses: mxschmitt/action-tmate@v3
