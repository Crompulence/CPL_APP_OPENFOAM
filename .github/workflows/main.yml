name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  test:
    runs-on: ubuntu-20.04
            
    steps:
    
      - name: Update repo
        run: sudo apt-get update -y
        
      - name: Install mpich
        run: sudo apt-get install -y mpich   
            
      - name: Update Checkout
        uses: actions/checkout@v3

      # Checks-out cpl-library repository
      - uses: actions/checkout@v3
        with:
          repository: Crompulence/cpl-library
          path: cpl-library
          
      - name: Build cpl-library
        working-directory: ./cpl-library
        run: | 
          make PLATFORM=gcc
          source SOURCEME.sh
          #Contents of SOURCEME
          echo "CPL_PATH=$CPL_PATH" >> $GITHUB_ENV
          echo "CPL_BIN_PATH=$CPL_BIN_PATH" >> $GITHUB_ENV
          echo "CPL_LIBRARY_PATH=$CPL_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CPL_INCLUDE_PATH=$CPL_INCLUDE_PATH" >> $GITHUB_ENV
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
          echo "CPLPY_PATH=$CPLPY_PATH" >> $GITHUB_ENV
          echo "CPL_THIRD_PARTY=$CPL_THIRD_PARTY" >> $GITHUB_ENV
          echo "CPL_THIRD_PARTY_INC=$CPL_THIRD_PARTY_INC" >> $GITHUB_ENV
          echo "CPL_THIRD_PARTY_LIB=$CPL_THIRD_PARTY_LIB" >> $GITHUB_ENV
          echo "$CPL_BIN_PATH" >> $GITHUB_PATH
        
      - name: Update pip
        run: python -m pip install --upgrade pip

      - name: Install pytest
        run: pip install pytest
          
      - name: Install mpi4py
        run: pip install mpi4py

      - name: Install scientific packages
        run: pip install numpy scipy matplotlib
        
      - uses: actions/cache@v2
        id: cache-openfoam  # give it a name for checking the cache hit-or-not
        with:
          path: ./openfoam-OpenFOAM-v2112/  # what we cache: the folder
          key: ${{ runner.os }}-primes
                
      - name: Download OpenFOAM
        if: steps.cache-openfoam.outputs.cache-hit != 'true'
        run: | 
          wget https://develop.openfoam.com/Development/openfoam/-/archive/OpenFOAM-v2112.220610/openfoam-OpenFOAM-v2112.220610.tar.gz
          wget https://develop.openfoam.com/Development/ThirdParty-common/-/archive/v2112/ThirdParty-common-v2112.tar.gz
          tar -xzf openfoam-OpenFOAM-v2112.220610.tar.gz
          tar -xzf ThirdParty-common-v2112.tar.gz
       #   wget https://develop.openfoam.com/Development/openfoam/-/archive/OpenFOAM-v2106/openfoam-OpenFOAM-v2106.tar.gz
       #   wget https://develop.openfoam.com/Development/ThirdParty-common/-/archive/v2106/ThirdParty-common-v2106.tar.gz

      - name: Build OpenFOAM
        if: steps.cache-openfoam.outputs.cache-hit != 'true'
        working-directory: ./openfoam-OpenFOAM-v2112.220610
        run: | 
          cp ../config/prefs.sh ./etc/
          source ./etc/bashrc
          foamSystemCheck
          wmake -j -v
          
      #- name: OpenFOAM from repo
      #  run: | 
      #    curl https://dl.openfoam.com/add-debian-repo.sh | sudo bash
      #    sudo apt-get install openfoam2106-default
      
      - name: Build CPL OPENFOAM 
        run: | 
           echo ./openfoam-OpenFOAM-v2112.220610 > ./CODE_INST_DIR
           make pstream
           make socket
           make cpltestfoam
           make cpltestsocketfoam
           
      - uses: actions/checkout@v2
      - name: Setup tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v3
